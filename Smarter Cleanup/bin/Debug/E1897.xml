<?xml version="1.0" encoding="utf-8"?>
<spicon>
  <!-- This is a configuration xml file for SPiCON LN. Modifying this file will impact the conversion.-->
  <!--Please use ^z wherever you want to provide only space as 'the input. For example use '<tag>^z</tag>' instead of '<tag> </tag>'-->
 
  
  <!-- 
  Version: 1.0.1
  Modified on: 11 Apr 2008 
  Modified by: Raja 
  Details of Modification:
      
      1. Error message added for 'Emphasis within word'.
      2.Error message added for Unacceptable control code found within Table.  
  
  
  -->

  <!-- 
  Version: 1.0.2
  Modified on: 23 Apr 2008 
  Modified by: Raja 
  Details of Modification:
      
      1. Cleanup for paragraph endswith space.
        
  -->

  <!-- 
  Version: 1.0.3
  Modified on: 02 May 2008 
  Modified by: Raja & Yoyo  
  Details of Modification:
      
      1. Cleanup for Garbage charecters.
        
  -->

  <!-- 
  Version: 1.0.4
  Modified on: 03 May 2008 
  Modified by: Raja   
  Details of Modification:
      
      1. Cleanup for Garbage charecters.
        
  -->

  <!-- 
  Version: 1.0.5
  Modified on: 14 May 2008 
  Modified by: Raja   
  Details of Modification:
      
      1.Emphasis was found within a word.
        
  -->
  <!-- 
  Version: 1.0.6
  Modified on: 09 June 2008 
  Modified by: Raja   
  Details of Modification:
      
      1.segment check for $=S and $=I.
        
  -->
  <!-- 
  Version: 1.0.7
  Modified on: 12 June 2008 
  Modified by: Raja   
  Details of Modification:
      
      1.segment check for $U and $O.
      2.segment check for $=R and $=B.
      3.segment check for $I and $N.
        
  -->
  <!-- 
  Version: 1.0.8
  Modified on: 23 June 2008 
  Modified by: Raja   
  Details of Modification:
      
      1.Modification in Emphasis was found within a word.      
        
  -->
  <!-- 
  Version: 1.0.9
  Modified on: 04 July 2008 
  Modified by: Raja   
  Details of Modification:
      
      1.Cleanup for Footnotes.      
      2.Cleanup for Bold tags.
        
  -->
  <DocToTextConversion>
    <General>
      <AcceptRevisions>True</AcceptRevisions>
      <!--Allowed Value: True/False. This should be true for apt conversion-->
      <TrackRevisions>False</TrackRevisions>
      <!--Allowed Value: True/False. This should be false for apt conversion-->
      <DisableFieldCodes>True</DisableFieldCodes>
      <!--Allowed Value: True/False. This should be true for apt conversion-->
      <RemoveSectionBreaks>True</RemoveSectionBreaks>
      <!--Allowed Value: True/False. This should be true for apt conversion-->
      <RemoveColumnBreaks>True</RemoveColumnBreaks>
      <!--Allowed Value: True/False. This should be true for apt conversion-->
      <RemovePageBreaks>True</RemovePageBreaks>
      <!--Allowed Value: True/False. This should be true for apt conversion-->
      <ConvertSoftEnterIntoSpace>True</ConvertSoftEnterIntoSpace>
      <!--Allowed Value: True/False-->
      <RemoveFormattingInEnterMarks>True</RemoveFormattingInEnterMarks>
      <!--Allowed Value: True/False. This should be true for apt conversion-->
      <RemoveExtraEnterMarks>True</RemoveExtraEnterMarks>
      <!--Allowed Value: True/False. This should be true for apt conversion-->
    </General>
    <Footnotes>
      <ConvertFootNotes>True</ConvertFootNotes>
      <!--Allowed Value: True/False-->
      <PrefixToAddWithReference>n</PrefixToAddWithReference>
      <!--Allowed Value: CDATA-->
      <AddSpaceBeforeReference>False</AddSpaceBeforeReference>
      <!--Allowed Value: True/False-->
      <AddSpaceAfterReference>True</AddSpaceAfterReference>
      <!--Allowed Value: True/False-->
      <OpeningTag>$F&gt;FTNT&gt;</OpeningTag>
      <!--Allowed Value: CDATA-->
      <ClosingTag>&gt;ENDFN&gt;$E</ClosingTag>
      <!--Allowed Value: CDATA-->
      <ApplyTagForLeadingSpace>True</ApplyTagForLeadingSpace>
      <!--Allowed Value: True/False-->
      <SpaceCount>5</SpaceCount>
      <!--Allowed Value: Positive Integer. Use as much of pipe symbols as needed for multiple possibilities. eg. <SpaceCount>3|4|5|6</SpaceCount>-->
      <TagForLeadingSpace>$T</TagForLeadingSpace>
      <!--Allowed Value: CDATA-->
      <ApplyTagForLeadingTab>True</ApplyTagForLeadingTab>
      <!--Allowed Value: True/False-->
      <TabCount>1</TabCount>
      <!--Allowed Value: Positive Integer. Use as much of pipe symbols as needed for multiple possibilities. eg. <TabCount>1|2</TabCount>-->
      <TagForLeadingTab>$T</TagForLeadingTab>
      <!--Allowed Value: CDATA-->
      <PrefixToAddWithFootnote>n</PrefixToAddWithFootnote>
      <!--Allowed Value: CDATA-->
      <AddSpaceBeforePrefixInFootnote>False</AddSpaceBeforePrefixInFootnote>
      <!--Allowed Value: True/False-->
      <AddSpaceAfterPrefixInFootnote>False</AddSpaceAfterPrefixInFootnote>
      <!--Allowed Value: True/False-->
      <GroupFootnotes>True</GroupFootnotes>
      <!--Allowed Value: True/False-->
      <FindForGrouping>&gt;ENDFN&gt;$E^p$F&gt;FTNT&gt;</FindForGrouping>
      <!--Allowed Value: CDATA-->
      <ReplaceForGrouping>$E^p$F</ReplaceForGrouping>
      <!--Allowed Value: CDATA-->
    </Footnotes>
    <ParagraphBasedTags>
      <LeadingSpace>
        <!--This group can be replicated with different set of values-->
        <ApplyTagForLeadingSpace>False</ApplyTagForLeadingSpace>
        <!--Allowed Value: True/False-->
        <SpaceCount>4</SpaceCount>
        <!--Allowed Value: Integer. Use as much of pipe symbols as needed for multiple possibilities. eg. <SpaceCount>3|4|5|6</SpaceCount>-->
        <OpeningTag></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag></ClosingTag>
        <!--Allowed Value: CDATA-->
        <DeleteSpace>True</DeleteSpace>
        <!--Allowed Value: True/False-->
      </LeadingSpace>
      <LeadingTab>
        <!--This group can be replicated with different set of values-->
        <ApplyTagForLeadingTab>True</ApplyTagForLeadingTab>
        <!--Allowed Value: True/False-->
        <TabCount>1</TabCount>
        <!--Allowed Value: Positive Integer. Use as much of pipe symbols as needed for multiple possibilities. eg. <TabCount>1|2</TabCount>-->
        <OpeningTag>$T</OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag></ClosingTag>
        <!--Allowed Value: CDATA-->
        <DeleteTab>True</DeleteTab>
        <!--Allowed Value: True/False-->
      </LeadingTab>
      <ParaAlignment>
        <!--This group can be replicated with different set of values-->
        <ApplyTagForParaAlignment>True</ApplyTagForParaAlignment>
        <!--Allowed Value: True/False-->
        <Alignment>Center</Alignment>
        <!--Allowed Value: Center/Left/Right/Distribute/Justify/JustifyHi/JustifyLow/JustifyMed/ThaiJustify. Use as much of pipe symbols as needed for multiple possibilities. eg. <TabCount>Right|Center</TabCount>-->
        <OpeningTag>$T</OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag></ClosingTag>
        <!--Allowed Value: CDATA-->
      </ParaAlignment>
    </ParagraphBasedTags>
    <FormattingTags>
      <FormattingTag>
        <!--This group can be replicated with different set of values-->
        <Format>Italic</Format>
        <!--Allowed Value: AllCaps/Bold/DoubleStrikeThrough/Emboss/Engrave/Italic/Outline/Shadow/SmallCaps/StrikeThrough/Subscript/Superscript/Underline-->
        <OpeningTag>$I</OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag>$N</ClosingTag>
        <!--Allowed Value: CDATA-->
      </FormattingTag>
      <FormattingTag>
        <!--This group can be replicated with different set of values-->
        <Format>Bold</Format>
        <!--Allowed Value: AllCaps/Bold/DoubleStrikeThrough/Emboss/Engrave/Italic/Outline/Shadow/SmallCaps/StrikeThrough/Subscript/Superscript/Underline-->
        <OpeningTag>$=B</OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag>$=R</ClosingTag>
        <!--Allowed Value: CDATA-->
      </FormattingTag>
      <FormattingTag>
        <!--This group can be replicated with different set of values-->
        <Format>Underline</Format>
        <!--Allowed Value: AllCaps/Bold/DoubleStrikeThrough/Emboss/Engrave/Italic/Outline/Shadow/SmallCaps/StrikeThrough/Subscript/Superscript/Underline-->
        <OpeningTag>$U</OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag>$O</ClosingTag>
        <!--Allowed Value: CDATA-->
      </FormattingTag>
    </FormattingTags>
    <Entities>
      <!--Use ^z for each space if the find/replace text contains space only.-->
      <Entity>
        <!--This group can be replicated with different set of values-->
        <Find>ChrW(61511)</Find>
        <!--Allowed Value: CDATA-->
        <Replace> $(GAMMA$) </Replace>
        <!--Allowed Value: CDATA-->
        <FindFont>Symbol</FindFont>
        <!--Allowed Value: Empty [or] Valid Font Name. Eg: <FindFont>Symbol</FindFont>-->
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <MatchWildcards>False</MatchWildcards>
        <!--Allowed Value: True/False-->
      </Entity>
      <Entity>
        <Find>ChrW(61508)</Find>
        <Replace> $(DELTA$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61516)</Find>
        <Replace> $(LAMBDA$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61528)</Find>
        <Replace> $(XI$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61520)</Find>
        <Replace> $(PI$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61523)</Find>
        <Replace> $(SIGMA$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61510)</Find>
        <Replace> $(PHI$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61507)</Find>
        <Replace> $(CHI$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61529)</Find>
        <Replace> $(PSI$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61527)</Find>
        <Replace> $(OMEGA$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61543)</Find>
        <Replace> $(gamma$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61540)</Find>
        <Replace> $(delta$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61548)</Find>
        <Replace> $(lambda$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61560)</Find>
        <Replace> $(xi$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61552)</Find>
        <Replace> $(pi$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61555)</Find>
        <Replace> $(sigma$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61542)</Find>
        <Replace> $(phi$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61539)</Find>
        <Replace> $(chi$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61561)</Find>
        <Replace> $(psi$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61537)</Find>
        <Replace> $(alpha$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61538)</Find>
        <Replace> $(beta$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61541)</Find>
        <Replace> $(epsilon$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61627)</Find>
        <Replace> $(approximately equal to$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61625)</Find>
        <Replace> $(not equal to$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61626)</Find>
        <Replace> $(identical to$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61504)</Find>
        <Replace> $(congruent to$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61534)</Find>
        <Replace> $(perpendicular$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61621)</Find>
        <Replace> $(proportional$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61603)</Find>
        <Replace><![CDATA[</=]]></Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61549)</Find>
        <Replace> $(mu$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61654)</Find>
        <Replace> $(square root$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61605)</Find>
        <Replace> $(infinity$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61683)</Find>
        <Replace> $(integral$) </Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(61611)</Find>
        <Replace><![CDATA[<-->]]></Replace>
        <FindFont>Symbol</FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <!--Symbol font entities end here.-->
      <Entity>
        <Find>~</Find>
        <Replace> $(approximately$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>±</Find>
        <Replace>+/-</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>1/4</Find>
        <Replace> 1/4 </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>¼</Find>
        <Replace> 1/4 </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(8730)</Find>
        <Replace> $(square root$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>£</Find>
        <Replace> $: </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>¢</Find>
        <Replace> $(cents$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>€</Find>
        <Replace> $(euro$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>Å</Find>
        <Replace> $(angstrom$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>°</Find>
        <Replace> $(degree$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(8594)</Find>
        <Replace><![CDATA[-->]]></Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(8592)</Find>
        <Replace><![CDATA[<--]]></Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(8593)</Find>
        <Replace> $(arrow up$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(8595)</Find>
        <Replace> $(arrow down$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
	  <Entity>
        <Find>ChrW(160)</Find>
        <Replace>^z</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(8597)</Find>
        <Replace> $(arrow up and arrow down$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>®</Find>
        <Replace>(R)</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>©</Find>
        <Replace>$;</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>§ §</Find>
        <Replace>$Z</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>§§</Find>
        <Replace>$Z</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>§</Find>
        <Replace>$S</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ChrW(182)</Find>
        <Replace>\P</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>#</Find>
        <Replace>#</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>†</Find>
        <Replace>+</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>‡</Find>
        <Replace>++</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
<Entity>
        <Find>æ</Find>
        <Replace>\ae</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>œ</Find>
        <Replace>\oe</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>||</Find>
        <Replace> $(parallel$) </Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find></Find>
        <Replace></Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
            <Entity>
        <Find>À</Find>
        <Replace>\`A</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
         <Entity>
        <Find>Á</Find>
        <Replace>\'A</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
         <Entity>
        <Find>Â</Find>
        <Replace>\[A</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
         <Entity>
        <Find>Ã</Find>
        <Replace>\~A</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ä</Find>
        <Replace>\:A</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>      
      <Find>Å</Find>
        <Replace>\0A</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ç</Find>
        <Replace>\cC</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>È</Find>
        <Replace>\`E</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>É</Find>
        <Replace>\'E</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ê</Find>
        <Replace>\[E</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ë</Find>
        <Replace>\:E</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ì</Find>
        <Replace>\`I</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Í</Find>
        <Replace>\'I</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Î</Find>
        <Replace>\[I</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ï</Find>
        <Replace>\:I</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ñ</Find>
        <Replace>\~N</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ò</Find>
        <Replace>\`O</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ó</Find>
        <Replace>\'O</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ô</Find>
        <Replace>\[O</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Õ</Find>
        <Replace>\~O</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ö</Find>
        <Replace>\:O</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ø</Find>
        <Replace>\/O</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ù</Find>
        <Replace>\`U</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ú</Find>
        <Replace>\'U</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Û</Find>
        <Replace>\[U</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ü</Find>
        <Replace>\:U</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>Ý</Find>
        <Replace>\'Y</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>à</Find>
        <Replace>\`a</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>á</Find>
        <Replace>\'a</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
       <Find>â</Find>
        <Replace>\[a</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ã</Find>
        <Replace>\~a</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
       <Find>ä</Find>
        <Replace>\:a</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ç</Find>
        <Replace>\cc</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>è</Find>
        <Replace>\`e</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>é</Find>
        <Replace>\'e</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ê</Find>
        <Replace>\[e</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ë</Find>
        <Replace>\:e</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ì</Find>
        <Replace>\`i</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>í</Find>
        <Replace>\'i</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>î</Find>
        <Replace>\[i</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ï</Find>
        <Replace>\:i</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ñ</Find>
        <Replace>\~n</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ò</Find>
        <Replace>\`o</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ó</Find>
        <Replace>\'o</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ô</Find>
        <Replace>\[o</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>õ</Find>
        <Replace>\~o</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ö</Find>
        <Replace>\:o</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find>ù</Find>
        <Replace>\`u</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
       <Find>ú</Find>
        <Replace>\'u</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>û</Find>
        <Replace>\[u</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
      <Find>ü</Find>
        <Replace>\:u</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
       <Entity>
      <Find>ý</Find>
        <Replace>\'y</Replace>
        <FindFont></FindFont>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <Entity>
        <Find></Find>
        <Replace></Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>False</MatchWildcards>
      </Entity>
      <!--Wildcards set true-->
      <Entity>
        <Find>$([0-9])</Find>
        <Replace>$\1</Replace>
        <FindFont></FindFont>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <MatchWildcards>True</MatchWildcards>
      </Entity>
    </Entities>
  </DocToTextConversion>
  <Cleanup>
    <CheckCleanedAlready>
      <!--To check whether this file is cleaned already by matching the list of keywords. If any of the keywords is present in the file, then program will quit cleaning up of the file-->
      <ExitIfCleanedAlready>True</ExitIfCleanedAlready>
      <!--Allowed Value: True/False-->
      <Keywords>
        <Keyword>
          <!--This group can be replicated with different set of values-->
          <Find>#BPOCLTAG#</Find>
          <!--Allowed Value: CDATA-->
          <MatchCase>True</MatchCase>
          <!--Allowed Value: True/False-->
          <MatchWholeWord>False</MatchWholeWord>
          <!--Allowed Value: True/False-->
        </Keyword>
      </Keywords>
    </CheckCleanedAlready>
    <RemoveBlankParagraphs>True</RemoveBlankParagraphs>
    <!--Allowed Value: True/False.-->
    <!--<WithInParagraph> group can be replicated with different set of values for Condition-Operation-->

    <!--Raaja Added for modify $T$T to $T on 05 March 2009 Starts-->
    <WithInDocument>
    <Operation>
      <MatchCase>True</MatchCase>
      <!--Allowed Value: True/False-->
      <MatchWholeWord>False</MatchWholeWord>
      <!--Allowed Value: True/False-->
      <UseRegex>True</UseRegex>
      <!--Allowed Value: True/False-->
      <Find>\$T\$T</Find>
      <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
      <Replace>$T</Replace>
      <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
      <Count></Count>
      <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
      <Code>REP</Code>
      <!-- Allowed value: INS/APP/DEF/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
    </Operation>
      </WithInDocument>
    <!--Raaja Added for modify $T$T to $T on 05 March 2009 End-->
    
    
    <!-- Raja added for footnote start 03-july-08-->
    <WithInParagraph>
      <Operation>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>^F>FTNT></Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>$F>FTNT></Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>
    <!-- Raja added for footnote end 03-july-08-->

    <!-- Raja added for insert bold tag 03-july-08-->
    <WithInParagraph>

      <Condition>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^=B</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Condition>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$=R</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>EW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>


      <Operation>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>=B</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>$=B</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>

    </WithInParagraph>

    <!-- Raja added for insert bold tag 03-july-08-->
    <!--Raja 03 may 08 garbage charecters-->
    <WithInParagraph>


      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>‘</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>'</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>


    <!--Raja 03 may 08 garbage charecters-->

    <!--Raja test garbage charecters-->

    <!--1.Garbage character.-->

    <WithInParagraph>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>


      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>\t</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>^z</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    <!--1.Garbage character.-->

    <!--2.Garbage character.-->

    <WithInParagraph>


      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>’</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>'</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    <!--2.Garbage character.-->

    <!--3.Garbage character.-->

    <WithInParagraph>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>“</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>"</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    <!--3.Garbage character.-->

    <!--4.Garbage character.-->
    <WithInParagraph>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>”</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>"</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>
    <!--4.Garbage character.-->

    <!--5.Garbage character.-->
    <WithInParagraph>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>–</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>-</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    <!--5.Garbage character.-->

    <!--6.Garbage character.-->

    <WithInParagraph>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>—</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>-</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    <!--6.Garbage character.-->

    <!--7.Garbage character.-->
    <WithInParagraph>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>ChrW(30)</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>-</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    <!--7.Garbage character.-->
    <!--Raja test garbage charecters-->
    
    
    <!-- Raja test 23 april 08-->
    <WithInParagraph>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^z+</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>EW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

        <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>[\s]{1,}$</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace></Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>DEF</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    <!-- Raja test 23 april 08-->



    <WithInParagraph>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^(\s)+</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$F>FTNT</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>^(\s)+</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>$$T</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    
        <WithInParagraph>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^(\s)+</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$F>FTNT</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>^(\s)+</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>$$T</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <ChangeInPreviousPara>False</ChangeInPreviousPara>
        <!--Allowed Value: True/False. To do the operation in the previous para-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/DEP/DEI/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, DEP-Delete Entire Para, DEI-Delete Entire Para and Insert the text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInParagraph>

    <!--Built-In: Replace double space into single space-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>^z^z</Find>
        <Replace>^z</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Buit-In: Bring space out of open tag of Italic i.e., $I-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>$I </Find>
        <Replace> $I</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of open tag of Bold i.e., $=B-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>$=B </Find>
        <Replace> $=B</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of open tag of Underline i.e., $U-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>$U </Find>
        <Replace> $U</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of close tag of Italic i.e., $N-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find> $N</Find>
        <Replace>$N </Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of close tag of Bold i.e., $=R-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find> $=R</Find>
        <Replace>$=R </Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of close tag of Underline i.e., $O-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find> $O</Find>
        <Replace>$O </Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--<WithInDocument> group can be replicated with different set of values for Condition-Operation-->
    <!--add $105-->
    
    <!--add $00:,$243:-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find></Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>$00:</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <Code>INS</Code>
        <!-- Allowed value: INS/APP/DEF/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find></Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>^p$243:#BPOCLTAG#</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <Code>APP</Code>
        <!-- Allowed value: INS/APP/DEF/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInDocument>
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>^z^z</Find>
        <Replace>^z</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Buit-In: Bring space out of open tag of Italic i.e., $I-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>$I </Find>
        <Replace> $I</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of open tag of Bold i.e., $=B-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>$=B </Find>
        <Replace> $=B</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of open tag of Underline i.e., $U-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>$U </Find>
        <Replace> $U</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of close tag of Italic i.e., $N-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find> $N</Find>
        <Replace>$N </Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of close tag of Bold i.e., $=R-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find> $=R</Find>
        <Replace>$=R </Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>
    <!--Built-In: Bring space out of close tag of Underline i.e., $O-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find> $O</Find>
        <Replace>$O </Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>

    <!--Generic Cleanup - Start-->
    	<!--Bring punctuations outside formatting tags-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>(\.|\,|\:|\?|;|'|"|\!)(\$N|\$=R|\$O)</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>$2$1</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <Code>RRP</Code>
        <!-- Allowed value: INS/APP/DEF/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInDocument>
    <!--Remove extra  enter marks-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>^p^p</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>^p</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <Code>RRP</Code>
        <!-- Allowed value: INS/APP/DEF/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInDocument>
    <!--Merge formatting tags seperated by space-->
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match></Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>NC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DC-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>$=R $=B</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>^z</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>$N $I</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>^z</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Find>$O $U</Find>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Replace>^z</Replace>
        <!--Allowed Value: CDATA if the 'Operation' contains any one of INS,APP,DEI and REP otherwise should be empty. Valid regex replace string if 'UseRegex' is True. Caution: If left empty for INS,APP,DEI and REP, empty string will be replaced/inserted.-->
        <Count></Count>
        <!--Allowed Value: Postive Integer. If left empty, replace all will happen. Applicable only if the 'Operation' contains REP-->
        <Code>REP</Code>
        <!-- Allowed value: INS/APP/DEF/REP/NOP. INS-Insert in the beginning, APP-Append to the paragraph, DEF-Delete the find text, REP-Replace the find text, NOP-No Operation. Can be replicated with different set of values. i.e., multiple operations can be performed after checking zero or more condition(s)-->
      </Operation>
    </WithInDocument>
    <WithInDocument>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>True</UseRegex>
        <Match></Match>
        <Code>NC</Code>
      </Condition>
      <Operation>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>[</Find>
        <Replace>$(</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>]</Find>
        <Replace>$)</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>True</UseRegex>
        <Find> (\$N|\$=R|\$O)</Find>
        <Replace>$1 </Replace>
        <Count></Count>
        <Code>RRP</Code>
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>True</UseRegex>
        <Find>(\$I|\$=B|\$U) </Find>
        <Replace> $1</Replace>
        <Count></Count>
        <Code>RRP</Code>
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>True</UseRegex>
        <Find>(\$I\$N|\$=B\$=R|\$U\$O)</Find>
        <Replace></Replace>
        <Count></Count>
        <Code>RRP</Code>
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>True</UseRegex>
        <Find>^z^z</Find>
        <Replace>^z</Replace>
        <Count></Count>
        <Code>RRP</Code>
      </Operation>
      <Operation>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Find>^p$T^p</Find>
        <Replace>^p</Replace>
        <Count></Count>
        <Code>REP</Code>
      </Operation>
    </WithInDocument>

  </Cleanup>
  <RemoveEmphasis>
    <!--To check whether this file is cleaned already by matching the list of keywords. If any of the keywords is present in the file, then program will quit cleaning up of the file-->
    <CheckCleanedAlready>
      <ExitIfNotCleanedAlready>True</ExitIfNotCleanedAlready>
      <!--Allowed Value: True/False-->
      <Keywords>
        <!--This group can be replicated with different set of values-->
        <Keyword>
          <Find>$243:#BPOCLTAG#</Find>
          <!--Allowed Value: CDATA-->
          <MatchCase>True</MatchCase>
          <!--Allowed Value: True/False-->
          <MatchWholeWord>False</MatchWholeWord>
          <!--Allowed Value: True/False-->
        </Keyword>
      </Keywords>
    </CheckCleanedAlready>
    <!--This group can be replicated with different set of values-->
    <Item>
      <SegmentNumber>$95:|$100:|$120:|$130:|$140:</SegmentNumber>
      <!--CDATA. Use as much of pipe symbols as needed for multiple possibilities.
  Eg: <SegmentNumber>$10:|$20:|$30:|$40:</SegmentNumber>-->
      <FormattingTag>$I|$N|$=B|$=R|$U|$O|$T</FormattingTag>
      <!--CDATA. Use as much of pipe symbols as needed for multiple possibilities.
  Eg: <FormattingTag>$I|$N|$=B|$=R|$U|$O</FormattingTag>-->
    </Item>
  </RemoveEmphasis>
  <Validation>
    <CheckSegmentSequence>True</CheckSegmentSequence>
    <!--Allowed Value: True/False-->

    <!--Raja added for segment check 09-june -2008*******************************************************************************-->
    <WithInSegment>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>$=S is present $=I is missing</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$=S</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$=I</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInSegment>

    <WithInSegment>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>$=I is present $=S is missing</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$=I</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$=S</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInSegment>
    <!--Raja added for segment check 09-june -2008*******************************************************************************-->


    <!--Raja added for segment check 12-june -2008*******************************************************************************-->
    <!-- $N$I-->
    <WithInSegment>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>$I is present $N is missing</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$I</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$N</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInSegment>

    <WithInSegment>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>$N is present $I is missing</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$N</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$I</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInSegment>
    <!-- $N$I-->
    <!-- $U$O-->
    <WithInSegment>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>$U is present $O is missing</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$U</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$O</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInSegment>

    <WithInSegment>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>$O is present $U is missing</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$O</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$U</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInSegment>

    <!-- $U$O-->

    <!-- $=B$=R-->
    <WithInSegment>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>$=B is present $=R is missing</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$=B</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$=R</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInSegment>

    <WithInSegment>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>$=R is present $=B is missing</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$=R</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$=B</Match>
        <CheckInPreviousSegment>False</CheckInPreviousSegment>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInAboveSegments>False</CheckInAboveSegments>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInSegment>
    <!-- $=B$=R-->

    <!--Raja added for segment check 12-june -2008*******************************************************************************-->


<WithInParagraph>
      <ErrorType>Warning</ErrorType>
      <ErrorMessage>If multiple numbers with one prefix are separated by slashes or commas, insert the prefix for all numbers. Example: Nos. 06-6036/6037 should be Nos. 06-6036/06-6037.</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$20:</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>SW</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>/</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>  
    <WithInParagraph>
      <ErrorType>Warning</ErrorType>
      <ErrorMessage>Please check location of "of counsel" in $105: should be after attorney name and title.</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$105:</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>SW</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>True</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>Of Counsel</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <!--Raja modified on june 23-2008 -->
    <WithInParagraph>
	      <!--This group can be replicated with different set of values-->
	      <ErrorType>Warning</ErrorType>
	      <!--Allowed Value: Error/Warning-->
	      <ErrorMessage>Please check. Close tag emphasis is outside abbreviated word</ErrorMessage>
	      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
	      <Condition>
	        <MatchCase>False</MatchCase>
	        <!--Allowed Value: True/False-->
	        <MatchWholeWord>False</MatchWholeWord>
	        <!--Allowed Value: True/False-->
	        <UseRegex>False</UseRegex>
	        <!--Allowed Value: True/False-->
	        <Match>$N.</Match>
	        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
	        <CheckInPreviousPara>False</CheckInPreviousPara>
	        <CheckInDocument>False</CheckInDocument>
	        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
	        <!--Allowed Value: True/False. To check the condition in the previous para-->
	        <CheckInDocument>False</CheckInDocument>
	        <!--Allowed Value: True/False. To check the condition in the entire document-->
	        <Code>CO</Code>
	        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
	      </Condition>
	    </WithInParagraph> 
	    <WithInParagraph>
	      <!--This group can be replicated with different set of values-->
	      <ErrorType>Warning</ErrorType>
	      <!--Allowed Value: Error/Warning-->
	      <ErrorMessage>Please check. Close tag emphasis is outside abbreviated word</ErrorMessage>
	      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
	      <Condition>
	        <MatchCase>False</MatchCase>
	        <!--Allowed Value: True/False-->
	        <MatchWholeWord>False</MatchWholeWord>
	        <!--Allowed Value: True/False-->
	        <UseRegex>False</UseRegex>
	        <!--Allowed Value: True/False-->
	        <Match>$O.</Match>
	        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
	        <CheckInPreviousPara>False</CheckInPreviousPara>
	        <CheckInDocument>False</CheckInDocument>
	        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
	        <!--Allowed Value: True/False. To check the condition in the previous para-->
	        <CheckInDocument>False</CheckInDocument>
	        <!--Allowed Value: True/False. To check the condition in the entire document-->
	        <Code>CO</Code>
	        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
	      </Condition>
	    </WithInParagraph> 
	    <WithInParagraph>
	      <!--This group can be replicated with different set of values-->
	      <ErrorType>Warning</ErrorType>
	      <!--Allowed Value: Error/Warning-->
	      <ErrorMessage>Please check. Close tag emphasis is outside abbreviated word</ErrorMessage>
	      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
	      <Condition>
	        <MatchCase>False</MatchCase>
	        <!--Allowed Value: True/False-->
	        <MatchWholeWord>False</MatchWholeWord>
	        <!--Allowed Value: True/False-->
	        <UseRegex>False</UseRegex>
	        <!--Allowed Value: True/False-->
	        <Match>$=R.</Match>
	        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
	        <CheckInPreviousPara>False</CheckInPreviousPara>
	        <CheckInDocument>False</CheckInDocument>
	        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
	        <!--Allowed Value: True/False. To check the condition in the previous para-->
	        <CheckInDocument>False</CheckInDocument>
	        <!--Allowed Value: True/False. To check the condition in the entire document-->
	        <Code>CO</Code>
	        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
	      </Condition>
	    </WithInParagraph> 
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Warning</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Emphasis was found within a word.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>(\$T|\$%)+</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\w(\$U|\$I|\$=B)+</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <!--Raja modified on june 23-2008 -->

    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Emphasis was found within a word.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>(\$O|\$N|\$=R)+\w</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>

    <!--raja test-->
    
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>'Pro se' should not be in any other case</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$105</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$(120|210|243)\:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInAboveParagraphs>True</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>pro se</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>Pro se</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Invalid column declaration with single digit number found in the MAT COMMAND</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$M</Match>
       <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        --><!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$M[0-9]*(C|L|R|H|HL|HL.L|HR)?,[0-9]*(C|L|R|H|HL|HL.L|HR)?,[0-9]*(C|L|R|H|HL|HL.L|HR)?\$D</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Condition>
        <MatchCase>False</MatchCase>
        --><!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$M[0-9]{2}(C|L|R|H|HL|HL.L|HR)?,[0-9]{2}(C|L|R|H|HL|HL.L|HR)?,[0-9]{2}(C|L|R|H|HL|HL.L|HR)?\$D </Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
       <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$D</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>EW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph >
    <!--yoga-->
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Invalid column declaration with single digit number found in the MAT COMMAND</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$M</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        --><!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$M[0-9]*(C|L|R|H|HL|HL.L|HR)?,[0-9]*(C|L|R|H|HL|HL.L|HR)?,[0-9]*(C|L|R|H|HL|HL.L|HR)?,[0-9]*(C|L|R|H|HL|HL.L|HR)?\$D</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Condition>
        <MatchCase>False</MatchCase>
        --><!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$M[0-9]{2}(C|L|R|H|HL)?,[0-9]{2}(C|L|R|H|HL|HL.L|HR)?,[0-9]{2}(C|L|R|H|HL|HL.L|HR)?,[0-9]{2}(C|L|R|H|HL|HL.L|HR)?\$D</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>

      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$D</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>EW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph >
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Double space is found</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^z^z</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <!--Para ends with space-->
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Paragraph ends with space</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^z</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>EW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <!--Para starts with space-->
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Paragraph starts with space</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^z</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <!--Segment starts with space-->
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Segment number is followed by space</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$\d+\:\s</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Para contains only $T</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$T\s*</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>EQ</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Warning</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Close tag of Emphasis is follwed by punctuation</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>(\$N|\$=R|\$O)(\.|\,|:|\:\;|\'|\"|\'|\?|!)</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Close tag of Emphasis is preceeded by space</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\s(\$N|\$=R|\$O)</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Open tag of Emphasis is followed by space</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>(\$I|\$=B|\$U)\s</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Warning</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Space followed by hyphen</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>-^z</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Warning</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>US should be U.S. if found within CITATION.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>True</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>US</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
<WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Warning</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>US should be U.S. if found within CITATION.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>True</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>U S</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>    
    <!--Unconvreted Footnote [FN1]-->
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Warning</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Unconverted footnote is present</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\[FN\d+\]</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>

    <!--vince added validation-->
    <!--JAN 28 validation start-->
    <!--JAN 23 validation start-->
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$F is present $E is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$F</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$E</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$E is present $F is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$E</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$F</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$F>FTNT> is present >ENDFN>$E is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$F>FTNT></Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>>ENDFN>$E</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>>ENDFN>$E is present $F>FTNT> is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>>ENDFN>$E</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$F>FTNT></Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <!--JAN 13 validation start-->
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Incorrect descriptive word used in $35:Argued-date segment (filed, issued, entered, decided, delivered, rendered)</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$35:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>(filed|issued|entered|decided|delivered|rendered)</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Incorrect descriptive word used in $40:Decided-date segment (filed, issued, entered, argued, submitted)</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$40:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>(filed|issued|entered|argued|submitted)</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Incorrect descriptive word used in $45:Filed-date segment (decided, delivered, rendered, argued, submitted)</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$45:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>SW</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>(decided|delivered|rendered|argued|submitted)</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <!--Allowed Value: True/False. To check the condition in the previous para-->
        <CheckInDocument>False</CheckInDocument>
        <!--Allowed Value: True/False. To check the condition in the entire document-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInParagraph>


    <!--raja-->

    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Unacceptable control code found within Table.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>\$M.*?(\$U|\$O|\$I|\$N|\$=B|\$=R|\$F|\$E|\$T|\%|\$=S|\$=I|\$=Pnnn).*?\$X</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <!--raja-->

    
    <!--JAN 13 validation end-->
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>Added SPACE before footnote End Tags.</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match> >ENDFN>$E</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
</WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>Added period at the end of $25:</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$25:</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>SW</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>.</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>EW</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>Period missing in $80:</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$80:</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>SW</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>.</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DE</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>Period missing in $90:</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$90:</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>SW</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>.</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DE</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>Period missing in $110:</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$110:</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>SW</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>.</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DE</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>Period missing in $105:</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$105:</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>SW</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>.</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DE</Code>
      </Condition>
    </WithInParagraph>
   <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$I is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$i</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$N is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$n</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$U is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$u</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$O is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$o</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$S is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$s</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$Z given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$z</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    
        <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$T given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$t</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$=B is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=b</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$=R is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=r</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$=S is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=s</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$=I is given is lower case</ErrorMessage>
      <Condition>
        <MatchCase>True</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=i</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
    </WithInParagraph>
    <!--<WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$I is present $N is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$I</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$N</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$N is present $I is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$N</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$I</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$U is present $O is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$U</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$O</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$O is present $U is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$O</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$U</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$=B is present $=R is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=B</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=R</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$=R is present $=B is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=R</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=B</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$=S is present $=I is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=S</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=I</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>
    <WithInParagraph>
      <ErrorType>Error</ErrorType>
      <ErrorMessage>$=I is present $=S is missing</ErrorMessage>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=I</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>CO</Code>
      </Condition>
      <Condition>
        <MatchCase>False</MatchCase>
        <MatchWholeWord>False</MatchWholeWord>
        <UseRegex>False</UseRegex>
        <Match>$=S</Match>
        <CheckInPreviousPara>False</CheckInPreviousPara>
        <CheckInDocument>False</CheckInDocument>
        <CheckInAboveParagraphs>False</CheckInAboveParagraphs>
        <CheckInDocument>False</CheckInDocument>
        <Code>DC</Code>
      </Condition>
    </WithInParagraph>-->
    <!--end of vince added validation-->
    
    

    <!--Check whether mandatory segments are present-->
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Mandatory Segment '$00' is missing in start of the file.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>$00:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Mandatory Segment '$10' is missing in the file.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p$10:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Mandatory Segment '$20' is missing in the file.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p$20:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>INVALID '$25:COURT SEGMENT FORMAT.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>True</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>True</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p\$25:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Mandatory Segment '$35:$?$%' is missing in the file.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p$35:$?$%</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Mandatory Segment '$40:$?$%' is missing in the file.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p$40:$?$%</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Mandatory Segment '$55:'.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p$55:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Warning</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>'$115:' Opinion-by Segment is missing in the file.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p$115:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Mandatory Segment '$120:' is missing in the file.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p$120:</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Mandatory Segment '$243' is missing [or] incorrectly coded in the file.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p$243:#BPOCLTAG#</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>DC</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
    <!--Check for empty paragraphs-->
    <WithInDocument>
      <!--This group can be replicated with different set of values-->
      <ErrorType>Error</ErrorType>
      <!--Allowed Value: Error/Warning-->
      <ErrorMessage>Empty paragraphs found the document.</ErrorMessage>
      <!--Allowed Value: CDATA. The message to be displayed in the log if the condition(s) is/are satisfied.-->
      <Condition>
        <MatchCase>False</MatchCase>
        <!--Allowed Value: True/False-->
        <MatchWholeWord>False</MatchWholeWord>
        <!--Allowed Value: True/False-->
        <UseRegex>False</UseRegex>
        <!--Allowed Value: True/False-->
        <Match>^p^p</Match>
        <!--Allowed Value: CDATA. Text to be matched for condition testing. Valid regex find pattern if 'UseRegex' is True-->
        <Code>CO</Code>
        <!-- Allowed value: SW/DS/EW/DE/EQ/NE/CO/DC/NC/MP. SW-Starts with, DS-Does not start with, EW-Ends with, DE-Does not end with, EQ-Equal to, NE-Not equal to, CO-Contains, DO-Does not contain, NC-No Condition, MP-Match Regex Pattern. Please ensure that the opposite conditions are not checked at a time. Can be replicated with different set of values. i.e., multiple conditions can be checked before performing any operation-->
      </Condition>
    </WithInDocument>
  
  </Validation>
  <GUI>
    <Buttons>
      <ShowButtons>True</ShowButtons>
      <!--Allowed Value: True/False-->
      <Button>
        <ID>B1</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>DOCUMENT BEGIN(Ctrl+1)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: DOCUMENT BEGIN^pShortcut: Ctrl+1</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<COURTCASE>
<lndocmeta:docinfo>
<lndocmeta:lnlni lnlni=""/>
<lndocmeta:lnminrev lnminrev="00000"/>
<lndocmeta:smi lnsmi=""/>
<lndocmeta:dpsi lndpsi=""/>
<lndocmeta:lnsourcedocid lnsourcedocid=""/>
<lndocmeta:lndoctype lndoctypename="COURTCASE"/>
<lndocmeta:lndoctypeversion lndoctypeversionmajor="06" lndoctypeversionminor="000"/>
<lndocmeta:lndoctypelang lndoctypelang="EN"/>
<lndocmeta:lnfilenum lnfilenum=""/>
<lndocmeta:fabinfo><lndocmeta:fabinfoitem name="B4DBNO" value=""/></lndocmeta:fabinfo>
</lndocmeta:docinfo>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B2</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:FULL-NAME (Ctrl+2)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:FULL-NAME:^pShortcut: Ctrl+2</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:FULL-NAME><lnvxe:fullcasename>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:fullcasename></lnv:FULL-NAME>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
    
      <Button>
        <ID>B3</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:SHORT-NAME   (Ctrl+3)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:SHORT-NAME:^pShortcut: Ctrl+3</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:SHORT-NAME><lnvxe:shortcasename>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:shortcasename></lnv:SHORT-NAME>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	 <Button>
        <ID>B4</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:NUMBER (Ctrl+4)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>lnv:NUMBER ^pShortcut: Ctrl+4</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:NUMBER><lnvxe:docketnumber>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:docketnumber></lnv:NUMBER>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
     
	  
      <Button>
        <ID>B5</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:COURT (Ctrl+5)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:COURT:^pShortcut: Ctrl+5</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:COURT>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnv:COURT>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B6</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:COURT-CITE-OFF(icial)  (Ctrl+6)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:COURT-CITE-OFF(icial)^pShortcut: Ctrl+6</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:COURT-CITE-OFF><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnv:COURT-CITE-OFF>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B7</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:CITE (Ctrl+7)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:CITE^pShortcut: Ctrl+7</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:CITE><cite4thisdoc>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</cite4thisdoc><lnv:CITE>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B8</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:ARGUEDDATE  (Ctrl+8)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:ARGUEDDATE^pShortcut: Ctrl+8</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:ARGUEDDATE><lnvxe:date>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:date></lnv:ARGUEDDATE>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B9</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:DECIDEDDATE (Ctrl+9)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:DECIDEDDATE ^pShortcut: Ctrl+9</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:DECIDEDDATE><lnvxe:date>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:date></lnv:DECIDEDDATE>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B10</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:FILEDDATE (Ctrl+0)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:FILEDDATE^pShortcut: Ctrl+0</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:FILEDDATE><lnvxe:date>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:date></lnv:FILEDDATE>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B11</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:DOC-STATUS  (Alt+1)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:DOC-STATUS ^pShortcut: Alt+1</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:DOC-STATUS><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnv:DOC-STATUS>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B12</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:PUB-STATUS (Alt+2)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:PUB-STATUS^pShortcut: Alt+2</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:PUB-STATUS><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnv:PUB-STATUS>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B13</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:SUBSEQ-HISTORY  (Alt+3)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:SUBSEQ-HISTORY ^pShortcut: Alt+3</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:SUBSEQ-HISTORY><lnvxe:subseqhistory><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnvxe:subseqhistory></lnv:SUBSEQ-HISTORY>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B14</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:PRIOR-HISTORY (Alt+4)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:PRIOR-HISTORY^pShortcut: Alt+4</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:PRIOR-HISTORY><lnvxe:priorhistory><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnvxe:priorhistory></lnv:PRIOR-HISTORY>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B15</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:DISPOSITION-1   (Alt+5)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:DISPOSITION-1  ^pShortcut: Alt+5</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:DISPOSITION-1><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnv:DISPOSITION-1>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B16</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:HEADNOTES-1 (Alt+6)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:HEADNOTES-1^pShortcut: Alt+6</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:HEADNOTES-1><lnvxe:headnote-simple><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnvxe:headnote-simple></lnv:HEADNOTES-1>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B17</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:SYLLABUS-1 (Alt+7)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:SYLLABUS-1^pShortcut: Alt+7</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:SYLLABUS-1><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnv:SYLLABUS-1>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B18</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:COUNSEL (Alt+8)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:COUNSEL^pShortcut: Alt+8</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:COUNSEL><lnvxe:counsel>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:counsel></lnv:COUNSEL>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	<Button>
        <ID>B19</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:COUNSEL (New line)(Alt+9)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:COUNSEL (New line)^pShortcut: Alt+9</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:counsel>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:counsel>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>

      <Button>
        <ID>B20</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:JUDGES (Alt+0)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:JUDGES^pShortcut: Alt+0</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:JUDGES><lnvxe:judges>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:judges></lnv:JUDGES>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>

     <Button>
        <ID>B21</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:OPINIONBY (Ctrl+F1)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>lnv:OPINIONBY ^pShortcut: Ctrl+F1</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:OPINIONBY>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnv:OPINIONBY>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>

      <Button>
        <ID>B22</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:OPINION (Ctrl+F2)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:OPINION^pShortcut: Ctrl+F2</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:OPINION>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnv:OPINION>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>

      <Button>
        <ID>B23</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:CONCURBY (Ctrl+F3)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:CONCURBY^pShortcut: Ctrl+F3</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:CONCURBY>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnv:CONCURBY>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>

      <Button>
        <ID>B24</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:CONCURS (Ctrl+F5)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:CONCURS ^pShortcut: Ctrl+F5</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:CONCURS><lnvxe:concur>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:concur></lnv:CONCURS>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>

     <Button>
        <ID>B25</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:DISSENTBY (Ctrl+F6)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:DISSENTBY^pShortcut: Ctrl+F6</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:DISSENTBY>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnv:DISSENTBY>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>



      <Button>
        <ID>B26</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:DISSENTS (Ctrl+F7)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:DISSENTS^pShortcut: Ctrl+F7</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:DISSENTS><lnvxe:dissent>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:dissent></lnv:DISSENTS>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>




      <Button>
        <ID>B27</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:SYS-AUDIT-TRAIL  (Ctrl+F8)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:SYS-AUDIT-TRAIL ^pShortcut: Ctrl+F8</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:SYS-AUDIT-TRAIL>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnv:SYS-AUDIT-TRAIL>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>

      <Button>
        <ID>B28</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:SYS-AUDIT-2 (Ctrl+F9)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:SYS-AUDIT-2^pShortcut: Ctrl+F9</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:SYS-AUDIT-2>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnv:SYS-AUDIT-2>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
      <Button>
        <ID>B29</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>lnv:SYS-PROD-INFO (Ctrl+F10)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: lnv:SYS-PROD-INFO^pShortcut: Ctrl+F10</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnv:SYS-PROD-INFO>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnv:SYS-PROD-INFO>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
      <Button>
        <ID>B30</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>DOCUMENT END (Ctrl+F11)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: DOCUMENT END^pShortcut: Ctrl+F11</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</COURTCASE>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	   <Button>
        <ID>B31</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Text (Ctrl+F12)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Text^pShortcut: Ctrl+F12</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	   <Button>
        <ID>B32</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Indented (Alt+F1)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Indented^pShortcut: Alt+F1</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<p i="3"><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	   <Button>
        <ID>B33</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Header (Alt+F2)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Header^pShortcut: Alt+F2</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:h>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:h>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	   <Button>
        <ID>B34</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Outdented (Left-justified text) (Alt+F3)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name:Outdented (Left-justified text)^pShortcut: Alt+F3</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	   <Button>
        <ID>B35</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>New Line (Drop one line) (Alt+F5)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: New Line (Drop one line)^pShortcut: Alt+F5</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<p nl="1"><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	   <Button>
        <ID>B36</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Italics (Alt+F6)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name:Italics^pShortcut: Alt+F6</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="it">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	   <Button>
        <ID>B37</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Bold (Alt+F7)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Bold^pShortcut: Alt+F7</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="bf">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	   <Button>
        <ID>B38</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Underline (Ctrl+B)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Underline^pShortcut: Ctrl+B</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="un">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	   <Button>
        <ID>B39</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>ItalicizedBold (Ctrl+I)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Both italicized and bold^pShortcut: Ctrl+I</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="ib">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	   <Button>
        <ID>B40</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>DoubleUnderlined (Ctrl+U)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name:Double underlined^pShortcut: Ctrl+U</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="dbl-un">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	    
	   
	   <Button>
        <ID>B41</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>UnderlinedBold(Alt+F8)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name:Both underlined and bold^pShortcut: Alt+F8</ScreenTip>
        <!--Allowed Value: CDATA-->
       <OpeningTag><![CDATA[<emph typestyle="bu">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	  
	    <Button>
        <ID>B42</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>ItalicizedUnderlined (Alt+F9)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name:Both italicized and underlined^pShortcut: Alt+F9</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="iu">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B43</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>ItalicizedUnderlinedBold (Alt+F10)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name:Italicized, underlined and bold^pShortcut: Alt+F10</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="biu">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B44</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Highlighted (Alt+F11)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name:Text is highlighted^pShortcut: Alt+F11</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="hi">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B45</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>SuperIndented-INDENTED (Alt+F12)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name:Super indented - INDENTED^pShortcut: Alt+F12</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:blockquote><p i="3"><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnvxe:blockquote>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B46</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>SuperIndented-NEW LINE(Ctrl+D)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Super indented - NEW LINE^pShortcut: Ctrl+D</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:blockquote><p nl="1"><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnvxe:blockquote>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B47</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>SuperIndented-DOUBLELINE(Ctrl+NumPad0)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Super indented - DOUBLE LINE^pShortcut: Ctrl+NumPad0</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:blockquote><p><lnvxe:text>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:text></p></lnvxe:blockquote>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B48</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Small Caps(Ctrl+G)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Small Caps^pShortcut: Ctrl+G</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle="smcaps">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B49</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>FootnoteIndicator/reference(Ctrl+NumPad1)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Footnote indicator/reference^pShortcut: Ctrl+NumPad1</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:fnr alt-content="" fnrtoken="ref" fntoken="fnote">]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:fnr>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B50</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>FootnoteBody(Ctrl+NumPad2)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Footnote body^pShortcut: Ctrl+NumPad2</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:footnotegrp>
<lnvxe:footnote fnrtokens="ref" fntoken="fnote"><lnvxe:fnlabel alt-content=""></lnvxe:fnlabel><lnvxe:fnbody>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:fnbody></lnvxe:footnote></lnvxe:footnotegrp>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B51</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>FNBody-Additional(Ctrl+K)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Footnote body - additional^pShortcut: Ctrl+K</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:footnote fnrtokens="ref" fntoken="fnote"><lnvxe:fnlabel alt-content=""></lnvxe:fnlabel>
<lnvxe:fnbody>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:fnbody></lnvxe:footnote>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B52</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>ForcedBlanks(Ctrl+NumPad3)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Forced blanks^pShortcut: Ctrl+NumPad3</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[&#x00A0;&#x00A0;&#x00A0;]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B53</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>ForcedBlanks-Underline(Ctrl+M)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Forced blanks - underline^pShortcut: Ctrl+M</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<emph typestyle=""un"">&#x00A0;&#x00A0;&#x00A0;]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</emph>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B54</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>PublicDomainPagination (Ctrl+NumPad4)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Public Domain Pagination^pShortcut: Ctrl+NumPad4</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<page count="" rsc=""/>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B55</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Overstruck (Ctrl+NumPad5)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Overstruck^pShortcut: Ctrl+NumPad5</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:strike>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:strike>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B56</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Subscript (Ctrl+Q)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Both underlined and bold^pShortcut: Ctrl+Q</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:sub>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:sub>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B57</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>Superscript (Ctrl+NumPad6)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Superscript^pShortcut: Ctrl+NumPad6</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[<lnvxe:sup>]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[</lnvxe:sup>]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  
	    <Button>
        <ID>B58</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>TEST (Ctrl+T)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Test^pShortcut: Ctrl+T</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[TEST]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[TEST]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>
	  	    
 <Button>
        <ID>B59</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>TEST1 (Ctrl+Y)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Test1^pShortcut: Ctrl+Y</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[TEST1]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[TEST1]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>			
	  
	  <Button>
        <ID>B60</ID>
        <!--Allowed Value: B1,B2,B3,...B58,B59,B60-->
        <Name>TEST2 (Ctrl+NumPad7)</Name>
        <!--Allowed Value: CDATA. Text to display on the button-->
        <Type>Character</Type>
        <!--Allowed Value: Para/Character-->
        <ScreenTip>Tag Name: Test2^pShortcut:Ctrl+NumPad7</ScreenTip>
        <!--Allowed Value: CDATA-->
        <OpeningTag><![CDATA[TEST2]]></OpeningTag>
        <!--Allowed Value: CDATA-->
        <ClosingTag><![CDATA[TEST2]]></ClosingTag>
        <!--Allowed Value: CDATA. May be empty if not needed.-->
      </Button>			
    </Buttons>
  </GUI>

</spicon>
